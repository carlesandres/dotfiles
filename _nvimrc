let $BASH_ENV = "~/.aliases"

" Set title in iTerm
set t_ts=^[]1;
set t_fs=^G
" Set the title of the Terminal to the currently open file
function! SetTerminalTitle()
    let titleString = expand('%:t')
    if len(titleString) > 0
        let &titlestring = expand('%:t')
        set title
    endif
endfunction
autocmd BufEnter * call SetTerminalTitle()


call plug#begin('~/.vim/plugged')

" My Bundles here:
" Plug 'Shougo/neocomplete.vim'
" Plug 'Shougo/neosnippet.vim'
" Plug 'Shougo/neosnippet-snippets'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
" Plug 'tpope/vim-rails'

Plug 'justinmk/vim-sneak'

Plug 'Shougo/vimproc.vim', {
            \ 'build' : {
            \     'windows' : 'tools\\update-dll-mingw',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ }
Plug 'Shougo/neomru.vim'
" Plug 'Shougo/vimshell'
Plug 'Shougo/denite.nvim'
Plug 'Shougo/neoyank.vim'

Plug 'mattn/webapi-vim'
Plug 'mattn/emmet-vim'
" Plug 'mattn/gist-vim'

Plug 'scrooloose/nerdtree'
Plug 'editorconfig/editorconfig-vim'
Plug 'suan/vim-instant-markdown'
Plug 'bling/vim-airline'
Plug 'gregsexton/gitv'

Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'briancollins/vim-jst'
" Plug 'groenewege/vim-less'
" Plug 'mustache/vim-mustache-handlebars'
" Plug 'evidens/vim-twig'
Plug 'elzr/vim-json'

Plug 'rking/ag.vim'
Plug 'tomtom/tcomment_vim'
Plug 'sjl/gundo.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'airblade/vim-gitgutter'
Plug 'ujihisa/unite-colorscheme'
Plug 'w0rp/ale'
Plug 'ap/vim-css-color'

" Plug 'AndrewRadev/switch.vim'
Plug 'chriskempson/base16-vim'

" Track the engine.
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

Plug 'vim-scripts/closetag.vim'
Plug 'justinmk/vim-gtfo'
Plug 'justinmk/vim-sneak'
Plug 'majutsushi/tagbar'
" Plug 'tsukkee/unite-tag'
" Plug 'osyo-manga/unite-quickfix'
Plug 'samuelsimoes/vim-jsx-utils'
Plug 'alampros/vim-styled-jsx'
Plug 'ryanoasis/vim-devicons'
" Plug 'Chiel92/vim-autoformat'
" Plug 'othree/yajs.vim'


" Initialize plugin system
call plug#end()

" Required:
filetype plugin indent on

set lazyredraw

" Set syntax highlighting on
syntax on
set background=dark

colorscheme candres_colors
" colorscheme base16-default-dark
" if getcwd() ==# '/Users/candres/src/newmilsi'
"     colorscheme earthsong-contrast
" elseif getcwd() ==# '/path/to/other_project'
"     colorscheme ir_black
" else
"     colorscheme base16-default
" endif

let mapleader=","

set nocompatible "Forget being compatible with good ol'vi
filetype plugin indent on " enable file-type-specific plugins and indentation.
set ruler "Show ruler
set nu "Show line numbers
set laststatus=2 "Show status line
set cursorline "highlight the line of the cursor
set scrolloff=8 " When the page starts to scroll, keep the cursor 8 lines from top and bottom
set relativenumber

set list "Show invisible characters
set listchars=tab:▸\ ,trail:•,extends:❯,precedes:❮
set showbreak=↪\
set nojoinspaces                  " Use only 1 space after "." when joining lines, not 2

"set status line the way I like it
set stl=%t\ %m\ %r\ Line:\ %l/%L[%p%%]\ Col:\ %c\ Buf:\ #%n\ [%b][0x%B]
set showmode "Show which mode I am in
set wildmenu "Command autocomplettion with the TAB key
set autoread " Automatically updates buffer when file has been changed outside VIM
set hidden " Allow switch to another buffer without saving it (you can always do :wa)
"set autowrite " Write the old file out when switching between files

" Change the currently select tab label colors
hi TabLineSel ctermfg=Black ctermbg=Yellow

" Change cursor depending on insert mode
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul

set nohlsearch                    " Disable hilight searches
set incsearch                     " Find next match as we type the search
set ignorecase                    " Searches are case insensitive
set smartcase                     " Unless there is at least one capital letter
set gdefault                      " have :s///g flag by default on

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

set nowrap                   " Don't wrap lines
set tabstop=4                " A tab is two spaces
set softtabstop=4            " ????
set shiftwidth=4             " An autoindent with >> is 2 spaces
set noexpandtab                " Use spaces, not tabs

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=100

set statusline+=%#warningmsg#
set statusline+=%*
set guifont=Monaco:h18 "Change default font and size for MacVim
" set shellcmdflag=-ic "Make :! behave like the command prompt

" Let's make it easy to edit this file (mnemonic for the key sequence is
" 'e'dit 'v'imrc)
nmap <silent> ,ev :e $MYVIMRC<cr>

" And to source this file as well (mnemonic for the key sequence is
" 's'ource 'v'imrc)
nmap <silent> ,sv :so $MYVIMRC<cr>

" nmap <leader>as ! source ~/.aliases<cr>
" nnoremap <leader>V :VimShell<cr>

" Use emmet only for html and css files
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall

" from :h zencoding-customize-keymappings
let g:user_emmet_leader_key='<C-z>'
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

"let g:user_zen_expandabbr_key = '<c-e>'
" let g:user_emmet_complete_tag = 1
"
" let g:user_emmet_settings = {
" \  'scss' : {
" \    'filters' : 'fc',
" \  }
" \}
"
" space = pagedown, - = pageup
nnoremap <Space> <PageDown>
noremap + <PageDown>
noremap - <PageUp>

" Search devdocs.io for word under cursor
function! SearchDev()
    let s:browser = "/usr/bin/open"
    let s:wordUnderCursor = expand("<cword>")
    let s:url = "http://devdocs.io/search?q=".s:wordUnderCursor
    let s:cmd ="silent ! " . s:browser . " " . s:url
    execute s:cmd
    redraw!
endfunction
map <leader>x :call SearchDev()<CR>

" gist-vim configuration
" let g:gist_show_privates = 1 " Show my private gists with ':Gist -l'
" let g:gist_post_private = 1 " I want all my gists private by default

" Quickly switch to previous buffer
nnoremap <leader><leader> <c-^>

"USeful shortcuts for searching and replacing
"noremap ;; :%s:::g<Left><Left><Left>
"noremap ;' :%s:::cg<Left><Left><Left><Left>

set splitright
set splitbelow

" set foldenable  "Enable folding
" set foldlevel=2
" set foldmethod=syntax

function! SaveSession()
    if v:this_session != ""
        echo "Saving."
        exe 'mksession! ' . '"' . v:this_session . '"'
    else
        echo "No Session."
    endif
endfunction

au VimLeave * :call SaveSession()

" Disable swap files, system dont crash that often these days
set updatecount=0

" disable cursor keys in normal mode
nmap <Left>  :echo "no!"<cr>
nmap <Right> :echo "no!"<cr>
nmap <Up>    :echo "no!"<cr>
nmap <Down>  :echo "no!"<cr>


" Paste toggle (,p)
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>

" Remap :W to :w
" command W w

set runtimepath+=~/src/dotfiles
let g:UltiSnipsSnippetsDir="~/src/dotfiles/ultisnips"

let g:UltiSnipsListSnippets = '<c-g>'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

autocmd Filetype snippets setlocal expandtab tabstop=4 shiftwidth=4

" Saving options in sessions prevent them from benefitting from
" updates in this very file and can be the cause of serious headaches.
" Thus, I don't save them:
set sessionoptions-=options

" Quick Fix
function! ToggleQF()
    if !exists("g:fx_toggle")
        let g:fx_toggle = 0
    endif
    if g:fx_toggle == 0
        let g:fx_toggle = 1
        copen
    else
        let g:fx_toggle = 0
        cclose
    endif
endfunc

" Toggle quickfix
nnoremap <leader>q <ESC>:call ToggleQF() <CR>

" Call Gundo
nnoremap <leader>gu :GundoToggle<CR>
let g:gundo_width = 30
let g:gundo_preview_bottom = 1

"prevent expand tab in .snippets files
au Filetype snippets setl noet

"Add .md extension as mkrkdown filetype
autocmd BufRead,BufNewFile  *.md set filetype=markdown
autocmd BufRead,BufNewFile  *.eslintrc set filetype=json
autocmd BufRead,BufNewFile  *.*rc set filetype=json
autocmd BufRead,BufNewFile  *.zshrc set filetype=sh
" autocmd BufRead,BufNewFile  *.ejs set filetype=html

"Prevent instant markdown from starting automatically
" you can invoke it with :InstantMarkdownPreview
let g:instant_markdown_autostart = 0

" Let vim-airline use powerline patched fonts
" let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#ale = 1
let g:airline_powerline_fonts = 1
let g:airline_detect_crypt=0
let g:airline#extensions#tabline#fnamemod = ':p:.'

let g:ale_sign_column_always = 1

" VIM Resources
" http://robots.thoughtbot.com/integrating-vim-into-your-life

" Call TagbarToggle
nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader>T :TagbarOpenAutoClose<CR>

" Faster search and replace (see vimregex.com/#substitute )
" This currently conflicts with use of semicolon to repeat last fast search
" noremap ;; :%s:::cg<Left><Left><Left>
" noremap ;' :%s:::g<Left><Left><Left><Left>

" Remove spaces trailing spaces in lines Mnemonic: change spaces
nnoremap <leader>cs :%s/\s\+$//<CR>

" Set up some custom ignores
call denite#custom#source('file_rec', 'sorters', ['sorter_sublime'])

" Unite's fuzzy matchers input pattern max length
let g:denite_matcher_fuzzy_max_input_length = 50

if executable('ag')
    " let g:denite_source_rec_async_command = ['ag', '--skip-vcs-ignores', '--vimgrep', '--hidden', '-g', '']
    call denite#custom#var('file_rec', 'command',
                \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
                \ ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
    let g:denite_source_grep_default_opts = '--skip-vcs-ignores --vimgrep --hidden'
    let g:denite_source_grep_recursive_opt = ''
endif

let g:denite_source_history_yank_enable = 1

" call denite#custom#option('_', 'split', 'no')

call denite#custom#map('insert', '<ESC>', '<denite:enter_mode:normal>', 'noremap')
call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('normal', '<Down>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('normal', '<Up>', '<denite:move_to_previous_line>', 'noremap')

nnoremap <leader>f :<C-u>Denite file_rec<cr>
nnoremap <leader>sx :<C-u>DeniteCursorWord file_rec<cr>
nnoremap <leader>F :<C-u>Denite file<cr>
nnoremap <leader>r :<C-u>Denite file_mru<cr>
nnoremap <leader>b :<C-u>Denite buffer<cr>
nnoremap <leader>y :<C-u>Denite neoyank<cr>
nnoremap <leader>m :<C-u>Denite mark<cr>
" nnoremap <leader>j :<C-u>Denite  jump<cr>

" Limit recent files list to 10
" call denite#custom#source('file_mru', 'max_candidates' , 15 )

" List colors schemes
nnoremap <leader>lc :<C-u>Denite colorscheme<cr>

" no-split allows denite results to take the whole current window
" no-quit, means that denite won't close as selections are made


" same as <leader>r (just because it makes sense)
nnoremap <leader>sr :<C-u>Denite file_mru<cr>

" sg: search globally
nnoremap <leader>sg :<C-u>Denite grep:.<cr>

" si: search in...
" nnoremap <leader>si :<C-u>Denite  grep:<cr>
nnoremap <leader>si :<C-u>Denite -input=import grep:.:--js<cr>

" sa: search again (resume lst Denite command)
" Will not work with any denite commands that have the 'wipe' option
nnoremap <leader>sa :<C-u>Denite -resume<cr>

" sj: search only javascript files
nnoremap <leader>sj :<C-u>Denite grep:.:--js<cr>

" sJ: search only JS files but in specific folders
nnoremap <leader>sJ :<C-u>Denite grep::--js<cr>

" sh: search only html files
nnoremap <leader>sh :<C-u>Denite grep:.:--html<cr>

" sH: search only html files but inside specific folders
nnoremap <leader>sH :<C-u>Denite grep::--html<cr>

" sc search only css files
nnoremap <leader>sc :<C-u>Denite grep:.:--css\ --sass\ --less<cr>

" sc search only css files but on specific folder(s)
nnoremap <leader>sC :<C-u>Denite grep::--css\ --sass\ --less<cr>

" sx search only sass and less files
nnoremap <leader>sx :<C-u>Denite grep:.:--sass\ --less<cr>

" sw search globally for word under cursor
nnoremap <leader>sw :<C-u>DeniteCursorWord grep:. -mode=normal<cr>
nnoremap <leader>sW :<C-u>DeniteCursorWord line<cr>

" sc search lines of text
nnoremap <leader>sl :<C-u>Denite line<cr>

nnoremap <leader>ss :<C-u>Denite ultisnips<cr>

nnoremap <leader>sR :<C-u>Denite directory_mru<cr>

" Set the size of the preview window used by fugitive
" and others
set previewheight=20

" Prevent cursor from jumping to beginning of line when switching between buffers
set nostartofline

" Shortcut to close all other windows
nnoremap <leader>o :only<cr>

" react
" Toogle NERDTree
nnoremap <leader>n :NERDTreeToggle<cr>

" Don't hide quotes on JSON files
let g:vim_json_syntax_conceal = 0

"Add a colored column at column 80
let &colorcolumn=join(range(81,999),",")

" Gists
let g:gist_detect_filetype = 1
let g:gist_post_private = 1

noremap <leader>d :bdelete<cr>

"<CR> - remove highlighting after search
" Other options here: http://stackoverflow.com/questions/657447/vim-clear-last-search-highlighting
" noremap <CR> :noh<CR><CR>

" This needs entering CR at the end and then redraw!
nnoremap <leader>k :exec 'silent !open -a "Google Chrome"'<cr>

" Replace word under cursor
nnoremap <leader>cw :%s/\<<C-r><C-w>\>/

nnoremap <leader>eu :<C-u>UltiSnipsEdit<cr>

" Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3

" Examples of using the Ultisnips with unite function
" function! UltiSnipsCallUnite()
" Unite -start-insert -winheight=100 -immediately -no-empty ultisnips
" return ''
" endfunction

" inoremap <silent> <F12> <C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>
" nnoremap <silent> <F12> a<C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>

" Edit in same path as current buffer
nnoremap <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>

" Join lines discarding empty spaces
" nnoremap <leader>jj Jx
nnoremap <leader>ii gg=G''


let g:jsx_ext_required = 0
" let g:syntastic_javascript_checkers = ['eslint']

" " Fugitive shortcuts
nnoremap <leader>g :Git
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gp :Git push<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>ga :Gwrite<cr>
nnoremap <leader>gg :w<cr>:Gwrite<cr>:Gcommit -m 'update'<cr>:Git push<cr><cr>:e<cr>

nnoremap <Leader>gl :exe "silent Glog -- % <Bar> Denite -no-quit quickfix"<CR>

" Gitv shortcut
nnoremap <leader>gv :Gitv<cr>

" Edit scheme
nnoremap <leader>es :e ~/.vim/colors/candres_colors.vim<CR>

" " Make syntastic check on open and on save
" let g:syntastic_check_on_open = 1
"
" "Make syntastic not check when quitting
" let g:syntastic_check_on_wq = 1
"
" "Make syntastic stop checking for error all the time
" let g:syntastic_enable_highlighting = 0

nnoremap <leader>ez :e ~/.zshrc<cr>
nnoremap <leader>eo :e ~/.oh-my-zsh<cr>
nnoremap <leader>ea :e ~/.aliases<cr>

let $BASH_ENV = "~/.aliases"
nnoremap <leader>ja :call JSXEncloseReturn()<CR>
nnoremap <leader>ji :call JSXEachAttributeInLine()<CR>
nnoremap <leader>je :call JSXExtractPartialPrompt()<CR>
nnoremap <leader>jc :call JSXChangeTagPrompt()<CR>
nnoremap vax :call JSXSelectTag()<CR>

" Better omni-completion shortucts
" nnoremap ^] ^X^]
" nnoremap ^F ^X^F
" nnoremap ^D ^X^D
" nnoremap ^L ^X^L


" nnoremap <leader>wi :e <C-R>=expand("%:p:h") . "/" <CR>
" nnoremap <leader>wi :<C-u>Unite  grep:.:import . :--js<cr>
" nnoremap <leader>sj :<C-u>Unite  grep:.:--js<cr>
"
function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode'])
    let g:airline_section_b = airline#section#create(['branch'])
    let g:airline_section_c = '%t'
    let g:airline_section_y = airline#section#create([''])
endfunction
autocmd VimEnter * call AirlineInit()

" Avoid new lines above and below comments to be comments
set formatoptions-=o

" See https://bluz71.github.io/2017/06/28/current-treats-future-wants-of-neovim.html
noremap <C-q> :confirm qall<CR>

map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

"  Folding JS
" augroup javascript_folding
"     au!
"     au FileType javascript setlocal foldmethod=syntax
" augroup END
"
" set foldlevelstart=99
