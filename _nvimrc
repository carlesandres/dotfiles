set shell=/bin/zsh
" let $BASH_ENV = "~/.aliases"

" Set title in iTerm
set t_ts=^[]1;
set t_fs=^G

" Set the title of the Terminal to the currently open file
function! SetTerminalTitle()
	let titleString = expand('%:t')
	if len(titleString) > 0
		let &titlestring = expand('%:t')
		set title
	endif
endfunction
autocmd BufEnter * call SetTerminalTitle()


call plug#begin('~/.vim/plugged')

" Plug 'arcticicestudio/nord-vim'
Plug 'morhetz/gruvbox'
" Plug 'sjl/badwolf'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'terryma/vim-smooth-scroll'
Plug 'wincent/terminus'
Plug 'wincent/scalpel'
Plug 'wincent/loupe'
Plug 'rhysd/devdocs.vim'
Plug 'nvim-treesitter/nvim-treesitter'
Plug 'kassio/neoterm'
Plug 'mhinz/neovim-remote'
Plug 'junegunn/vim-github-dashboard'
  let g:github_dashboard = { 'username': 'carlesandres' }

let g:fzf_buffers_jump = 1
let g:fzf_preview_window=''
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}
Plug 'junegunn/fzf.vim'

Plug 'justinmk/vim-sneak'
" Plug 'mattn/webapi-vim'
Plug 'mattn/emmet-vim'
" Plug 'mattn/gist-vim'

Plug 'scrooloose/nerdtree'
Plug 'editorconfig/editorconfig-vim'
Plug 'suan/vim-instant-markdown'
Plug 'bling/vim-airline'
Plug 'gregsexton/gitv'

Plug 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'elzr/vim-json'

Plug 'wincent/ferret'
Plug 'tomtom/tcomment_vim'
Plug 'simnalamburt/vim-mundo'
Plug 'mg979/vim-visual-multi'
Plug 'airblade/vim-gitgutter'
Plug 'ujihisa/unite-colorscheme'
Plug 'w0rp/ale'
Plug 'hail2u/vim-css3-syntax'
Plug 'ap/vim-css-color'

Plug 'chriskempson/base16-vim'

" Track the engine.
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

" Plug 'vim-scripts/closetag.vim'
Plug 'justinmk/vim-gtfo'
Plug 'justinmk/vim-sneak'
" Plug 'majutsushi/tagbar'
" Plug 'tsukkee/unite-tag'
" Plug 'osyo-manga/unite-quickfix'
Plug 'samuelsimoes/vim-jsx-utils'
Plug 'ryanoasis/vim-devicons'
" Plug 'Chiel92/vim-autoformat'
" Plug 'othree/yajs.vim'
"
Plug 'wellle/targets.vim'
Plug 'alampros/vim-styled-jsx'
" Plug 'dbeniamine/cheat.sh-vim'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'avakhov/vim-yaml'


Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-function'
Plug 'haya14busa/vim-textobj-function-syntax'

" TO-DO: Currently deoplete interferes with denite
" I need to find how to prevent it from running in denite searches
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Initialize plugin system
call plug#end()

" Required:
filetype plugin indent on

set lazyredraw

" Set syntax highlighting on
syntax on
set background=dark

" colorscheme candres_colors
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox
" colorscheme badwolf

let mapleader=","

set nocompatible "Forget being compatible with good ol'vi
filetype plugin indent on " enable file-type-specific plugins and indentation.
set ruler "Show ruler
set nu "Show line numbers
set laststatus=2 "Show status line
set cursorline "highlight the line of the cursor
set scrolloff=8 " When the page starts to scroll, keep the cursor 8 lines from top and bottom
set relativenumber

set list "Show invisible characters
set listchars=tab:▸\ ,trail:•,extends:❯,precedes:❮
set showbreak=↪\
set nojoinspaces                  " Use only 1 space after "." when joining lines, not 2

"set status line the way I like it
set stl=%t\ %m\ %r\ Line:\ %l/%L[%p%%]\ Col:\ %c\ Buf:\ #%n\ [%b][0x%B]
set showmode "Show which mode I am in
set wildmenu "Command autocomplettion with the TAB key
set autoread " Automatically updates buffer when file has been changed outside VIM
set hidden " Allow switch to another buffer without saving it (you can always do :wa)
"set autowrite " Write the old file out when switching between files

" Change the currently select tab label colors
hi TabLineSel ctermfg=Black ctermbg=Yellow

" Change cursor depending on insert mode
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul

set nohlsearch                    " Disable hilight searches
set incsearch                     " Find next match as we type the search
set ignorecase                    " Searches are case insensitive
set smartcase                     " Unless there is at least one capital letter
set gdefault                      " have :s///g flag by default on

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

set nowrap                   " Don't wrap lines
set tabstop=4                " A tab is two spaces
set softtabstop=4            " ????
set shiftwidth=4             " An autoindent with >> is 2 spaces
set noexpandtab                " Use spaces, not tabs

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=100

set statusline+=%#warningmsg#
set statusline+=%*
set guifont=Monaco:h18 "Change default font and size for MacVim
" set shellcmdflag=-ic "Make :! behave like the command prompt

" Let's make it easy to edit this file (mnemonic for the key sequence is
" 'e'dit 'v'imrc)
nmap <silent> ,ev :e $MYVIMRC<cr>

" And to source this file as well (mnemonic for the key sequence is
" 's'ource 'v'imrc)
nmap <silent> ,sv :so $MYVIMRC<cr>

" nmap <leader>as ! source ~/.aliases<cr>
" nnoremap <leader>V :VimShell<cr>

" Use emmet only for html and css files
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall

" from :h zencoding-customize-keymappings
let g:user_emmet_leader_key='<C-z>'
imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

"let g:user_zen_expandabbr_key = '<c-e>'
" let g:user_emmet_complete_tag = 1
"
" let g:user_emmet_settings = {
" \  'scss' : {
" \    'filters' : 'fc',
" \  }
" \}
"
" space = pagedown, - = pageup
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
" nnoremap <Space> <PageDown>
" noremap + <PageDown>
" noremap - <PageUp>
noremap <silent> <Space> :call smooth_scroll#down(&scroll, 0, 1)<CR>
noremap <silent> - :call smooth_scroll#up(&scroll, 0, 1)<CR>
noremap <silent> + :call smooth_scroll#down(&scroll, 0, 1)<CR>

nmap <leader>x <Plug>(LoupeClearHighlight)

" gist-vim configuration
" let g:gist_show_privates = 1 " Show my private gists with ':Gist -l'
" let g:gist_post_private = 1 " I want all my gists private by default

" Quickly switch to previous buffer
nnoremap <leader><leader> <c-^>

"USeful shortcuts for searching and replacing
"noremap ;; :%s:::g<Left><Left><Left>
"noremap ;' :%s:::cg<Left><Left><Left><Left>

set splitright
set splitbelow

" set foldenable  "Enable folding
" set foldlevel=2
" set foldmethod=syntax

function! SaveSession()
	if v:this_session != ""
		echo "Saving."
		exe 'mksession! ' . '"' . v:this_session . '"'
	else
		echo "No Session."
	endif
endfunction

au VimLeave * :call SaveSession()

" Disable swap files, system dont crash that often these days
set updatecount=0

" disable cursor keys in normal mode
nmap <Left>  :echo "no!"<cr>
nmap <Right> :echo "no!"<cr>
nmap <Up>    :echo "no!"<cr>
nmap <Down>  :echo "no!"<cr>


" Paste toggle (,p)
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>

" Remap :W to :w
" command W w

set runtimepath+=~/src/dotfiles
let g:UltiSnipsSnippetsDir="~/src/dotfiles/ultisnips"

let g:UltiSnipsListSnippets = '<c-g>'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

autocmd Filetype snippets setlocal expandtab tabstop=4 shiftwidth=4

" Saving options in sessions prevent them from benefitting from
" updates in this very file and can be the cause of serious headaches.
" Thus, I don't save them:
set sessionoptions-=options

" Quick Fix
function! ToggleQF()
	if !exists("g:fx_toggle")
		let g:fx_toggle = 0
	endif
	if g:fx_toggle == 0
		let g:fx_toggle = 1
		copen
	else
		let g:fx_toggle = 0
		cclose
	endif
endfunc

" Toggle quickfix
nnoremap <leader>q <ESC>:call ToggleQF() <CR>

" Call Gundo
nnoremap <leader>gu :GundoToggle<CR>
let g:gundo_width = 30
let g:gundo_preview_bottom = 1

"prevent expand tab in .snippets files
au Filetype snippets setl noet

"Add .md extension as mkrkdown filetype
autocmd BufRead,BufNewFile  *.md set filetype=markdown
autocmd BufRead,BufNewFile  *.eslintrc set filetype=json
autocmd BufRead,BufNewFile  *.*rc set filetype=json
autocmd BufRead,BufNewFile  *.zshrc set filetype=sh
" autocmd BufRead,BufNewFile  *.ejs set filetype=html

"Prevent instant markdown from starting automatically
" you can invoke it with :InstantMarkdownPreview
let g:instant_markdown_autostart = 0

" Let vim-airline use powerline patched fonts
" let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#ale = 1
let g:airline_powerline_fonts = 1
let g:airline_detect_crypt=0
let g:airline#extensions#tabline#fnamemod = ':p:.'

let g:ale_sign_column_always = 1
let g:ale_fixers = { 'javascript': ['eslint'], 'typescript': ['eslint'], 'css': ['stylelint']}

" VIM Resources
" http://robots.thoughtbot.com/integrating-vim-into-your-life

" Call TagbarToggle
" nnoremap <leader>t :TagbarToggle<CR>
" nnoremap <leader>T :TagbarOpenAutoClose<CR>

" Remove spaces trailing spaces in lines Mnemonic: change spaces
nnoremap <leader>cs :%s/\s\+$//<CR>




" Set the size of the preview window used by fugitive
" and others
set previewheight=20

" Prevent cursor from jumping to beginning of line when switching between buffers
set nostartofline

" Shortcut to close all other windows
nnoremap <leader>o :only<cr>

" react
" Toogle NERDTree
nnoremap <leader>nt :NERDTreeToggle<cr>
nnoremap <leader>nc :NERDTreeFind<cr>
let g:vim_json_syntax_conceal = 0

"Add a colored column at column 80
let &colorcolumn=join(range(81,999),",")

" Gists
let g:gist_detect_filetype = 1
let g:gist_post_private = 1

"<CR> - remove highlighting after search
" Other options here: http://stackoverflow.com/questions/657447/vim-clear-last-search-highlighting
" noremap <CR> :noh<CR><CR>

" This needs entering CR at the end and then redraw!
" Check Chrome (cc)
nnoremap <leader>cc :exec 'silent !open -a "Google Chrome"'<cr>

nnoremap <leader>eu :<C-u>UltiSnipsEdit<cr>
nnoremap <leader>ep :e package.json<cr>
nnoremap <leader>ec :e .circleci/config.yml<cr>

" Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3

" Examples of using the Ultisnips with unite function
" function! UltiSnipsCallUnite()
" Unite -start-insert -winheight=100 -immediately -no-empty ultisnips
" return ''
" endfunction

" inoremap <silent> <F12> <C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>
" nnoremap <silent> <F12> a<C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>

" Edit in same path as current buffer
nnoremap <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>ww :saveas <C-R>=expand("%:p:h") . "/" <CR>

" Join lines discarding empty spaces
" nnoremap <leader>jj Jx
nnoremap <leader>ii gg=G''

let g:jsx_ext_required = 0

" " Fugitive shortcuts
nnoremap <leader>g :Git
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gp :Git push<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>ga :Git add -A <cr>
"nnoremap <leader>gg :w<cr>:Gwrite<cr>:Gcommit -m 'update'<cr>:Git push<cr><cr>:e<cr>

" Gitv shortcut
nnoremap <leader>gv :Gitv<cr>

" Edit scheme
" nnoremap <leader>es :e ~/.vim/colors/candres_colors.vim<CR>

nnoremap <leader>ez :e ~/.zshrc<cr>
nnoremap <leader>eo :e ~/.oh-my-zsh<cr>
nnoremap <leader>ea :e ~/.aliases<cr>

let $BASH_ENV = "~/.aliases"
nnoremap <leader>ja :call JSXEncloseReturn()<CR>
nnoremap <leader>ji :call JSXEachAttributeInLine()<CR>
nnoremap <leader>je :call JSXExtractPartialPrompt()<CR>
nnoremap <leader>jc :call JSXChangeTagPrompt()<CR>
nnoremap vat :call JSXSelectTag()<CR>

" Better omni-completion shortucts
" nnoremap ^] ^X^]
" nnoremap ^F ^X^F
" nnoremap ^D ^X^D
" nnoremap ^L ^X^L

" Avoid new lines above and below comments to be comments
set formatoptions-=o

" See https://bluz71.github.io/2017/06/28/current-treats-future-wants-of-neovim.html
noremap <C-q> :confirm qall<CR>

map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

"  Folding JS
" augroup javascript_folding
"     au!
"     au FileType javascript setlocal foldmethod=syntax
" augroup END
"
" set foldlevelstart=99

noremap <Leader>aa :ALEFix<CR>

let g:gtfo#terminals = { 'mac': 'iterm' }


nnoremap <leader>gu :MundoToggle<CR>

" Global replace word under cursor
function! GlobalReplace()
	let s:wordUnderCursor = expand("<cword>")
	let s:cmd =":bufdo :%s/" . s:wordUnderCursor . "/"
	echo s:cmd
endfunction
nnoremap <leader>GR :call GlobalReplace() <CR>

function! ToggleNuMode()
	if &rnu == 0
		set rnu
	else
		set norelativenumber
		set nonumber
	endif
endfunction
" sn => Switch Number
nnoremap <leader>sn :call ToggleNuMode() <CR>


augroup WrapLineInMDFile
	autocmd!
	autocmd FileType markdown setlocal wrap
augroup END

" As seen on: https://coderwall.com/p/lwvhkw/vimtip-5-treat-dashes-as-part-of-word
set iskeyword+=-

" TO-DO: Currently deoplete interferes with denite
" let g:deoplete#enable_at_startup = 1
" inoremap <silent><expr> <TAB>  pumvisible() ? '\<C-n>' : '\<TAB>'

let g:ScalpelMap=0
nmap <leader>cw <Plug>(Scalpel)
" Replace word under cursor (now replaced by scalpel)
" nnoremap <leader>cw :%s/\<<C-r><C-w>\>/

" Search devdocs.io for word under cursor
nmap <leader>K <Plug>(devdocs-under-cursor)


" global find/replace inside working directory
function! FindReplace()
  " figure out which directory we're in
	let dir = expand('%:h')
  " ask for patterns
  call inputsave()
  let find = input('Pattern: ')
  call inputrestore()
  let replace = input('Replacement: ')
  call inputrestore()
  " are you sure?
  let confirm = input('WARNING: About to replace ' . find . ' with ' . replace . ' in ' . dir . '/**/* (y/n):')
  " clear echoed message
  :redraw
  if confirm == 'y'
    " find with rigrep (populate quickfix )
    :silent exe 'Rg ' . find
    " use cfdo to substitute on all quickfix files
    :silent exe 'cfdo %s/' . find . '/' . replace . '/g | update'
    " close quickfix window
    :silent exe 'cclose'
    :echom('Replaced ' . find . ' with ' . replace . ' in all files in ' . dir )
  else
    :echom('Find/Replace Aborted')
    return
  endif
endfunction

" mnemonic: Search
:nnoremap <Leader>S :call FindReplace()<CR>

" Close all other buffers
" Taken from: https://salferrarello.com/vim-close-all-buffers-except-the-current-one/
command! BufOnly execute '%bdelete|edit #|normal `"'

" TO-DO: This could be done with unite
" command! BufOld execute '5,$bdelete|edit #|normal `"'
"
" Delete current buffer
noremap <leader>dd :bdelete<cr>

" Delete other (do) buffers
noremap <leader>do :BufOnly<CR>


if has('nvim') 
	tnoremap <Esc> <C-\><C-n>
	let $GIT_EDITOR = 'nvr -cc split --remote-wait'
endif

" Terminal yarn dev
nnoremap <leader>tyd :<C-u>Texec yarn\ dev<cr>
" Terminal make test
nnoremap <leader>tmt :<C-u>Texec make\ test<cr>
nnoremap <leader>to :<C-u>Topen<cr>


" npm repo
:nmap <leader>nr :<C-u>!npm repo <c-r>=expand("<cword>")<cr><cr>

command! -bang -nargs=* JSFiles
  \ call fzf#vim#grep(
  \   'rg --column -t js --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \  <bang>0)

command! -bang -nargs=* CSSFiles
  \ call fzf#vim#grep(
  \   'rg --column -t css --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \  <bang>0)

nnoremap <silent> <leader>hh :History:<cr>
nnoremap <silent> <leader>b :Buffers<cr>
nnoremap <silent> <leader>f :GFiles<cr>
nnoremap <silent> <leader>r :History<cr>
nnoremap <silent> <leader>t :Tags<cr>
nnoremap <silent> <leader>x :exe "Files ".expand("%:p:h")<cr>
nnoremap <silent> <leader>sl :BLines<cr>
nnoremap <silent> <leader>sL :Lines<cr>
nnoremap <silent> <leader>: :Commands<cr>
nnoremap <silent> <leader>m :Marks<cr>
nnoremap <silent> <leader>M :Maps<cr>
nnoremap <silent> <leader>sw :exe "BLines ".expand('<cword>')<cr>
nnoremap <silent> <leader>sW :exe "Rg ".expand('<cword>')<cr>
nnoremap <leader>sg :RG<CR>
nnoremap <silent> <leader>sf :GFiles<cr>
nnoremap <silent> <leader>sj :JSFiles<CR>
nnoremap <silent> <leader>sc :CSSFiles<CR>
nnoremap <silent> <leader>ss :Snippets<CR>

" Quick terminal exit.
" Partly btained from https://github.com/sQVe/dotfiles/blob/f9a51f14f7c4b6a9c41345c213927813f0d06768/config/nvim/autocmd.vim
augroup QuickTerminalExit
  autocmd!
  autocmd! FileType fzf tnoremap <buffer> <Esc> <C-c>
" The next line is mine and I am sooooo proud!!
  autocmd! FileType fzf nnoremap <silent> q :q<cr>
augroup END

let NERDTreeShowHidden=1
